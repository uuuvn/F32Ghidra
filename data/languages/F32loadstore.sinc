# ld* and st* have Rs_REG and Rd_REG swapped

with : a=0x30 & rs=0x0  {
    :mov Rd_REG64, Imm is b=0x0 & Rd_REG64 & Imm { Rd_REG64 = Imm; }
    :mov Rd_REG64, ImmVar1 is b=0x1 & Rd_REG64 & ImmVar1 { Rd_REG64 = ImmVar1; }
    :mov Rd_REG64, ImmVar2 is b=0x2 & Rd_REG64 & ImmVar2 { Rd_REG64 = ImmVar2; }
    :mov Rd_REG64, ImmVar3 is b=0x3 & Rd_REG64 & ImmVar3 { Rd_REG64 = ImmVar3; }
}

with : a=0x31 {
    :ldw Rd_REG64, "ram["^Rs_REG64, Imm^"]" is b=0x0 & Rd_REG64 & Rs_REG64 & Imm {
        tmp:8 = Rs_REG64 + Imm;
        Rd_REG64 = *[ram]tmp;
    }

    :ldw Rd_REG64, "reg["^Rs_REG64, Imm^"]" is b=0x1 & Rd_REG64 & Rs_REG64 & Imm {
        tmp:8 = Rs_REG64 + Imm;
        Rd_REG64 = *[reg]tmp;
    }

    :ldw Rd_REG64, "mem["^Rs_REG64, Imm^"]" is b=0x2 & Rd_REG64 & Rs_REG64 & Imm {
        tmp:8 = Rs_REG64 + Imm;
        Rd_REG64 = *[mem]tmp;
    }

    :ldw Rd_REG64, "unk["^Rs_REG64, Imm^"]" is b=0x3 & Rd_REG64 & Rs_REG64 & Imm {
        tmp:8 = Rs_REG64 + Imm;
        Rd_REG64 = *[unk]tmp;
    }
}


with : a=0x32 {
    :ldd Rd_REG64, "ram["^Rs_REG64, Imm^"]" is b=0x0 & Rd_REG64 & Rs_REG64 & Imm {
        tmp:8 = Rs_REG64 + Imm;
        Rd_REG64 = *[ram]tmp;
    }
    :ldd Rd_REG64, "reg["^Rs_REG64, Imm^"]" is b=0x1 & Rd_REG64 & Rs_REG64 & Imm {
        tmp:8 = Rs_REG64 + Imm;
        Rd_REG64 = *[reg]tmp;
    }
    :ldd Rd_REG64, "mem["^Rs_REG64, Imm^"]" is b=0x2 & Rd_REG64 & Rs_REG64 & Imm {
        tmp:8 = Rs_REG64 + Imm;
        Rd_REG64 = *[mem]tmp;
    }
    :ldd Rd_REG64, "unk["^Rs_REG64, Imm^"]" is b=0x3 & Rd_REG64 & Rs_REG64 & Imm {
        tmp:8 = Rs_REG64 + Imm;
        Rd_REG64 = *[unk]tmp;
    }
}

with : a=0x33 {
    :stw Rs_REG64, "ram["^Rd_REG64, Imm^"]" is b=0x0 & Rs_REG64 & Rd_REG64 & Imm {
        tmp:8 = Rd_REG64 + Imm;
        *[ram]tmp = Rs_REG64:4;
    }
    :stw Rs_REG64, "reg["^Rd_REG64, Imm^"]" is b=0x1 & Rs_REG64 & Rd_REG64 & Imm {
        tmp:8 = Rd_REG64 + Imm;
        *[reg]tmp = Rs_REG64:4;
    }
    :stw Rs_REG64, "mem["^Rd_REG64, Imm^"]" is b=0x2 & Rs_REG64 & Rd_REG64 & Imm {
        tmp:8 = Rd_REG64 + Imm;
        *[mem]tmp = Rs_REG64:4;
    }
    :stw Rs_REG64, "unk["^Rd_REG64, Imm^"]" is b=0x3 & Rs_REG64 & Rd_REG64 & Imm {
        tmp:8 = Rd_REG64 + Imm;
        *[unk]tmp = Rs_REG64:4;
    }
}

with : a=0x34 {
    :std Rs_REG64, "ram["^Rd_REG64, Imm^"]" is b=0x0 & Rs_REG64 & Rd_REG64 & Imm {
        tmp:8 = Rd_REG64 + Imm;
        *[ram]tmp = Rs_REG64;
    }
    :std Rs_REG64, "reg["^Rd_REG64, Imm^"]" is b=0x1 & Rs_REG64 & Rd_REG64 & Imm {
        tmp:8 = Rd_REG64 + Imm;
        *[reg]tmp = Rs_REG64;
    }
    :std Rs_REG64, "mem["^Rd_REG64, Imm^"]" is b=0x2 & Rs_REG64 & Rd_REG64 & Imm {
        tmp:8 = Rd_REG64 + Imm;
        *[mem]tmp = Rs_REG64;
    }
    :std Rs_REG64, "unk["^Rd_REG64, Imm^"]" is b=0x3 & Rs_REG64 & Rd_REG64 & Imm {
        tmp:8 = Rd_REG64 + Imm;
        *[unk]tmp = Rs_REG64;
    }
}

with : a=0x35 {
    :stm Rs_REG64, "ram["^Rd_REG64, Imm^"]" is b=0x0 & Rs_REG64 & Rd_REG64 & Imm {
        i:8 = 0;
        <loop>
            if (i >= ctr) goto <end>;
            tmp:8 = Rd_REG64 + Imm + i;
            *[ram]tmp = Rs_REG64:4;
            i = i + 1;
            goto <loop>;
        <end>
    }
    :stm r1, "ram["^Rd_REG64, Imm^"]" is b=0x0 & r1 & rs=1 & Rd_REG64 & Imm {
        i:8 = 0;
        <loop>
            if (i >= ctr) goto <end>;
            tmp:8 = Rd_REG64 + Imm + i;
            tmp_val:4 = cbuf_pop_dword();
            *[ram]tmp = tmp_val;
            i = i + 1;
            goto <loop>;
        <end>
    }
    :stm Rs_REG64, "reg["^Rd_REG64, Imm^"]" is b=0x1 & Rs_REG64 & Rd_REG64 & Imm {
        i:8 = 0;
        <loop>
            if (i >= ctr) goto <end>;
            tmp:8 = Rd_REG64 + Imm + i;
            *[reg]tmp = Rs_REG64:4;
            i = i + 1;
            goto <loop>;
        <end>
    }
    :stm r1, "reg["^Rd_REG64, Imm^"]" is b=0x1 & r1 & rs=1 & Rd_REG64 & Imm {
        i:8 = 0;
        <loop>
            if (i >= ctr) goto <end>;
            tmp:8 = Rd_REG64 + Imm + i;
            tmp_val:4 = cbuf_pop_dword();
            *[reg]tmp = tmp_val;
            i = i + 1;
            goto <loop>;
        <end>
    }
    :stm Rs_REG64, "mem["^Rd_REG64, Imm^"]" is b=0x2 & Rs_REG64 & Rd_REG64 & Imm {
        i:8 = 0;
        <loop>
            if (i >= ctr) goto <end>;
            tmp:8 = Rd_REG64 + Imm + i;
            *[mem]tmp = Rs_REG64:4;
            i = i + 1;
            goto <loop>;
        <end>
    }
    :stm r1, "mem["^Rd_REG64, Imm^"]" is b=0x2 & r1 & rs=1 & Rd_REG64 & Imm {
        i:8 = 0;
        <loop>
            if (i >= ctr) goto <end>;
            tmp:8 = Rd_REG64 + Imm + i;
            tmp_val:4 = cbuf_pop_dword();
            *[mem]tmp = tmp_val;
            i = i + 1;
            goto <loop>;
        <end>
    }
    :stm Rs_REG64, "unk["^Rd_REG64, Imm^"]" is b=0x3 & Rs_REG64 & Rd_REG64 & Imm {
        i:8 = 0;
        <loop>
            if (i >= ctr) goto <end>;
            tmp:8 = Rd_REG64 + Imm + i;
            *[unk]tmp = Rs_REG64:4;
            i = i + 1;
            goto <loop>;
        <end>
    }
    :stm r1, "unk["^Rd_REG64, Imm^"]" is b=0x3 & r1 & rs=1 & Rd_REG64 & Imm {
        i:8 = 0;
        <loop>
            if (i >= ctr) goto <end>;
            tmp:8 = Rd_REG64 + Imm + i;
            tmp_val:4 = cbuf_pop_dword();
            *[unk]tmp = tmp_val;
            i = i + 1;
            goto <loop>;
        <end>
    }
}

with : a=0x36 {
    :stw ImmRs, "ram["^Rd_REG64, Imm^"]" is b=0x0 & ImmRs & Rd_REG64 & Imm {
        tmp:8 = Rd_REG64 + Imm;
        *[ram]tmp = ImmRs:4;
    }
    :stw ImmRs, "reg["^Rd_REG64, Imm^"]" is b=0x1 & ImmRs & Rd_REG64 & Imm {
        tmp:8 = Rd_REG64 + Imm;
        *[reg]tmp = ImmRs:4;
    }
    :stw ImmRs, "mem["^Rd_REG64, Imm^"]" is b=0x2 & ImmRs & Rd_REG64 & Imm {
        tmp:8 = Rd_REG64 + Imm;
        *[mem]tmp = ImmRs:4;
    }
    :stw ImmRs, "unk["^Rd_REG64, Imm^"]" is b=0x3 & ImmRs & Rd_REG64 & Imm {
        tmp:8 = Rd_REG64 + Imm;
        *[unk]tmp = ImmRs:4;
    }
}
